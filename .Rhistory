install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
#############
# ip and excitatory neurons
#############
library(Seurat)
devtools::install_github("iaconogi/bigSCale2")
install.pacakge(BioQC)
install.pacakges('BioQC')
install.packages('BioQC')
devtools::install_github("iaconogi/bigSCale2", dependencies = T)
BiocManager::install("BioQC")
getwd()
library('nCov2019')
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'zh')
library('remotes')
remotes::install_github("GuangchuangYu/nCov2019", dependencies = TRUE)
library('nCov2019')
x <- get_nCov2019(lang = 'en')
x
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'zh')
rm(list=ls())
library('nCov2019')
x <- get_nCov2019(lang = 'zh')
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'en')
confirmed = d3.csv(
"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"
)
import { data } from "@fil/ncov2019-data"
x <- get_nCov2019(lang = 'en')
str(x)
plot(dat$confirm)
dat = x$chinaDayList
plot(dat$confirm)
source('Dropbox/research/mypackages/rpp/rpp.R')
rep(1:3,1:3)
case.time = rep(1:length(dat$confirm),dat$confirm)
fit = fitRPP(case.time)
names(x)
str(x)
x <- get_nCov2019(lang = 'en')
str(x)
names(x)
dat = read.csv('Desktop/corvid19/us_covid19_daily.csv')
str(dat)
counts = dat$total
time = rep(1:length(counts), counts)
fit = fitRPP(time)
time = rep(1:length(counts), counts)*365
fit = fitRPP(time)
tmp = c('a','b','c','a')
factor(tmp)
factor(tmp,levels=c('a','b','c'))
factor(tmp,levels=c('b','c','a'))
help(nodepie)
??nodepie
getwd()
mylist = c(1,2,3)
myfuc = function(l){
l = c(l,4)
}
myfuc(mylist)
mylist
library(xlsx)
Sys.getenv('JAVA')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/openjdk-14.0.1.jdk/Contents/Home')
library(xlsx)
Sys.getenv('JAVA')
x1 = rnom(100)
x2 = rnom(100)
epsilon = rnom(100)
y = 3*x1 + 2*x2 + epsilon
x1 = rnorm(100)
x2 = rnorm(100)
epsilon = rnorm(100)
y = 3*x1 + 2*x2 + epsilon
lm(y~x1+x2)
z1 = x1+x2
z2 = x1-x2
lm(y~z1+z2)
fit2 = lm(y~z1+z2)
str(fit2)
fitted(fit2)
fit1 = lm(y~x1+x2)
fitted(fit1)
x1 = rnorm(100)
x2 = x1
epsilon = rnorm(100)
y = 3*x1 + 2*x2 + epsilon
fit1 = lm(y~x1+x2)
z1 = x1+x2
z2 = x1-x2
fit2 = lm(y~z1+z2)
fitted(fit1)
fitted(fti2)
fitted(fit2)
fit1
fit2
x2 = rnorm(100)
epsilon = rnorm(100)
y = 3*x1 + 2*x2 + epsilon
fit1 = lm(y~x1+x2)
z1 = x1+x2
z2 = x1-x2
fit2 = lm(y~z1+z2)
fitted(fit1)
fitted(fit2)
fit1
fit2
2.5303+       0.4582
2.9885/2
x1 = rnorm(100)
x2 = rnorm(100) + 0.1*x1
epsilon = rnorm(100)
y = 3*x1 + 2*x2 + epsilon
fit1 = lm(y~x1+x2)
z1 = x1+x2
z2 = x1-x2
fit2 = lm(y~z1+z2)
fitted(fit1)
fitted(fit2)
fit1
fit2
lambdas <- 10^seq(2, -3, by = -.1)
fig3 = glmnet(cbind(x1, x2), y, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
fig3 = glmnet::glmnet(cbind(x1, x2), y, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
install.packages('glmnet')
fig3 = glmnet::glmnet(cbind(x1, x2), y, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
fitted(fg3)
fitted(fig3)
fit3 = glmnet::glmnet(cbind(x1, x2), y, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
str(fit3)
str()
str(cbind(x1, x2))
help(glmnet)
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
data("panc8")
library(SeuratData)
# extract the raw counts and metadata for data sets from 5 technologies
data.list = split_dataset_by_batch(X=t(as.matrix(panc8@assays$RNA@counts)),
batch = panc8@meta.data$tech,
labels = panc8@meta.data$celltype,
metadata = panc8@meta.data,
dataset.name = 'panc:')
int.out = CFITIntegrate(X.list=exprs.list, r=20, verbose=T, seed=0)
# data preprocessing
exprs.list = preprocess_for_integration(data.list$X.list, genes, scale.factor=10^4, scale=T, center=F)
# select highly variable genes
genes = select_genes(data.list$X.list, ngenes=2000, verbose=F)
int.out = CFITIntegrate(X.list=exprs.list, r=20, verbose=T, seed=0)
# data preprocessing
exprs.list = preprocess_for_integration(data.list$X.list, genes, scale.factor=10^4, scale=T, center=F)
tech = do.call(c, lapply(data.list$metadata.list, function(x) x$tech))
celltype = do.call(c, data.list$labels.list)
table(tech, celltype)
int.out = CFITIntegrate(X.list=exprs.list, r=20, verbose=T, seed=0)
# ncell-by-ngene expression matrix
exprs.int = do.call(rbind, int.out$H.list) %*% t(int.out$W)
# ncell-by-r low dimensiional representation
Hnorm = do.call(rbind, int.out$H.list) %*% diag(colSums(int.out$W))
tech = do.call(c, lapply(data.list$metadata.list, function(x) x$tech))
celltype = do.call(c, data.list$labels.list)
umap.out = plot_umap(X=Hnorm, labels=celltype,
pca = NULL, n_components = 2, n_neighbors = 50, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='cell type', # figure parameters
seed=42)
umap.out = plot_umap(X=Hnorm, labels=celltype,
pca = NULL, n_components = 2, n_neighbors = 50, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='cell type', # figure parameters
seed=42)
p1 = umap.out$p # colored by technologies
p2 = plot_umap(labels=tech, point.size = 0.5, alpha=0.5, legend.name='technology', emb=umap.out$emb)$p # colored by cell types
p1
p2
dataset.name = 'panc:')
data.list = split_dataset_by_batch(X=t(as.matrix(panc8@assays$RNA@counts)),
batch = panc8@meta.data$dataset,
labels = panc8@meta.data$celltype,
metadata = panc8@meta.data,
dataset.name = 'panc:')
genes = select_genes(data.list$X.list, ngenes=2000, verbose=F)
exprs.list = preprocess_for_integration(data.list$X.list, genes, scale.factor=10^4, scale=T, center=F)
int.out = CFITIntegrate(X.list=exprs.list, r=20, verbose=T, seed=0)
# ncell-by-ngene expression matrix
exprs.int = do.call(rbind, int.out$H.list) %*% t(int.out$W)
tech = do.call(c, lapply(data.list$metadata.list, function(x) x$tech))
celltype = do.call(c, data.list$labels.list)
umap.out = plot_umap(X=Hnorm, labels=celltype,
pca = NULL, n_components = 2, n_neighbors = 50, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='cell type', # figure parameters
seed=42)
umap.out = plot_umap(X=Hnorm, labels=celltype,
pca = NULL, n_components = 2, n_neighbors = 50, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='cell type', # figure parameters
seed=42)
p1 = umap.out$p # colored by technologies
p2 = plot_umap(labels=tech, point.size = 0.5, alpha=0.5, legend.name='technology', emb=umap.out$emb)$p # colored by cell types
p1
p2
str(data.list)
str(int.out)
int.ref.out = CFITIntegrate(X.list=exprs.list[c(1,2,3,5:8)], r=15, verbose=T, seed=42)
??FindMarkers
# transfer: run time 10 seconds
tf.out = CFITTransfer(Xtarget=exprs.list[[4]], Wref=int.ref.out$W, seed=0, verbose=F)
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::document()
getwd()
setwd(~/Dropbox/research/cFIT/cFIT/)
setwd('~/Dropbox/research/cFIT/cFIT/')
devtools::document()
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
devtools::document()
devtools::document()
devtools::load_all('~/Dropbox/research/cFIT/cFIT/')
# transfer: run time 10 seconds
tf.out = CFITTransfer(Xtarget=exprs.list[[4]], Wref=int.ref.out$W, seed=0, verbose=F)
Hnorm = rbind(do.call(rbind, int.ref.out$H.list), tf.out$H) %*% diag(colSums(int.ref.out$W))
source = rep(c('reference','target'), c(nrow(do.call(rbind, int.ref.out$H.list)), nrow(tf.out$H)))
celltype = do.call(c, c(data.list$labels.list[c(1,2,3,5)],data.list$labels.list[4]))
umap.out = plot_umap(X=Hnorm, labels=source, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='source',
cols=c('grey80','red'), seed=0)
umap.out = plot_umap(X=Hnorm, labels=source, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='source',
cols=c('grey80','red'), seed=0)
p1 = umap.out$p # colored by source
p2 = plot_umap(labels=celltype, point.size = 0.5, alpha=0.5, legend.name='cell type',
emb=umap.out$emb)$p # colored by cell types
celltype = do.call(c, c(data.list$labels.list[c(1,2,3,5:8)],data.list$labels.list[4]))
p2 = plot_umap(labels=celltype, point.size = 0.5, alpha=0.5, legend.name='cell type',
emb=umap.out$emb)$p # colored by cell types
p1+p2
p1
p2
int.out = CFITIntegrate(X.list=exprs.list, r=20, verbose=T, seed=42)
# ncell-by-ngene expression matrix
exprs.int = do.call(rbind, int.out$H.list) %*% t(int.out$W)
tech = do.call(c, lapply(data.list$metadata.list, function(x) x$tech))
celltype = do.call(c, data.list$labels.list)
umap.out = plot_umap(X=Hnorm, labels=celltype,
pca = NULL, n_components = 2, n_neighbors = 50, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='cell type', # figure parameters
seed=42)
umap.out = plot_umap(X=Hnorm, labels=celltype,
pca = NULL, n_components = 2, n_neighbors = 50, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='cell type', # figure parameters
seed=42)
p1 = umap.out$p # colored by technologies
p2 = plot_umap(labels=tech, point.size = 0.5, alpha=0.5, legend.name='technology', emb=umap.out$emb)$p # colored by cell types
p1
p2
# ncell-by-ngene expression matrix
exprs.int = do.call(rbind, int.out$H.list) %*% t(int.out$W)
# ncell-by-r low dimensiional representation
Hnorm = do.call(rbind, int.out$H.list) %*% diag(colSums(int.out$W))
tech = do.call(c, lapply(data.list$metadata.list, function(x) x$tech))
celltype = do.call(c, data.list$labels.list)
umap.out = plot_umap(X=Hnorm, labels=celltype,
pca = NULL, n_components = 2, n_neighbors = 50, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='cell type', # figure parameters
seed=42)
umap.out = plot_umap(X=Hnorm, labels=celltype,
pca = NULL, n_components = 2, n_neighbors = 50, min_dist = 0.1, # umap parameters
point.size = 0.6, alpha=0.8, title=NULL, legend.name='cell type', # figure parameters
seed=42)
p1 = umap.out$p # colored by technologies
p2 = plot_umap(labels=tech, point.size = 0.5, alpha=0.5, legend.name='technology', emb=umap.out$emb)$p # colored by cell types
p1
p2
